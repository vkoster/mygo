# ==============================================================================
# Hier entsteht ein Docker-Container, der das Executable Go-File enthält.
# - Stage 1: das Executable wird gebaut
# - Stage 2: das Executable wird in eine Docker-Image gepackt
#   Dann wird das Image gestartet
# Den oauth/client Container interaktiv mit SH aus einem Image heraus starten:
#           docker run -it --entrypoint sh oauth/client:0.0.1
# Historie
# 14.10.2020 Templates-Folder mitkopiert
#            Image zum debuggen separat starten (s.o.)
# 10.10.2020 erstellt
# ------------------------------------------------------------------------------
version: '3.0'
services:
  # Baut die App als Linux Binary und legt sie als app_lnx ins Verzeichnis des Themas.
  nested_lnx:
    image: golang:latest
    volumes:
      # VM: vagrant ist Host (Windows: C:\01arbeit\03udemy\golang\github.com\vkoster\mygo\packages-demo\nested-packages\quote)
      # Container-Mountpoint: /gomod
      - /vagrant/github.com/vkoster/mygo/packages-demo/nested-packages:/gomod
      # VM: go ist Host (Windows) C:\Users\vkoster\go\
      # der nach /go gemountet wird
      # Achtung: dafür muss /go in der VM gemountet sein!
      - /go:/go
    working_dir: /gomod/
    # -v: alle kompilierten Packages ausgeben
    # -a: alle Packages neue bauen
    # -o: Name für den Output ändern...
    # -tags netgo: nur für Alpine-Hosts erforderlich
    command: go build -v -o app_lnx .
  # Zum Debuggen: Stage 1 des Multi-Stage Builds.
  # Dient nur dazu, das Ergebnis des Build-Prozesses zu kontrollieren.
  # Es entsteht ein Image, basierend auf Golang, in dem sich die gebaute Anwendung befinden sollte.
  nested-stg1:
    environment:
      - CGO_ENABLED=0
    build:
      context: .
      dockerfile: nested-stg1.df
    image: mygo/nested:stg1
    ports:
      - "3020:3020"
  # Hier wird die App im Multi-Stage Build gebaut.
  # Ergebnis ist
  nested:
    environment:
      - CGO_ENABLED=0
    build:
      context: .
      dockerfile: nested-ms.df
    image: mygo/nested:0.0.1
    ports:
      - "3020:3020"


